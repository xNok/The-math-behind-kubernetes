from knsp.problem import *

problem_data: ProblemData = {
    "max_node_type": 3,
    "applications": (
        "web-server",
        "api-gateway",
        "batch-processor",
        "message-queue",
        "cache-service",
        "database-replica",
        "streaming-analytics",
        "machine-learning-inference",
        "reporting-service",
        "data-warehouse-loader",
    ),
    "resources": ("cpu", "memory"),
    "node_types": (
        "c4-standard-2",
        "c4-standard-4",
        "c4-standard-8",
        "c4-highcpu-2",
        "c4-highcpu-4",
        "c4-highcpu-8",
        "c4-highmem-2",
        "c4-highmem-4",
        "c4-highmem-8",
    ),
    "time_intervals": 24,
    "application_replicas": (
        (2, 2, 2, 2, 2, 2, 2, 3, 5, 6, 7, 8, 10, 8, 7, 6, 5, 6, 8, 6, 5, 4, 3, 2),
        (2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 5, 6, 5, 4, 4, 3, 3, 5, 4, 3, 2, 2, 2),
        (3, 3, 2, 2, 2, 2, 3, 4, 6, 7, 8, 8, 10, 8, 7, 7, 6, 7, 9, 7, 6, 5, 4, 3),
        (2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 4, 3, 3, 3, 3, 4, 3, 3, 2, 2, 2),
        (2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 6, 6, 8, 7, 6, 5, 5, 5, 7, 6, 5, 4, 3, 2),
        (2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 3, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2),
        (2, 2, 2, 2, 2, 2, 2, 3, 4, 5, 5, 6, 7, 6, 6, 5, 5, 6, 7, 6, 5, 4, 3, 2),
        (2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 7, 6, 6, 5, 5, 7, 6, 5, 4, 3, 2),
        (2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 5, 6, 5, 4, 4, 4, 4, 5, 4, 3, 3, 2, 2),
        (2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 5, 4, 4, 3, 3, 3, 4, 3, 3, 2, 2, 2),
    ),
    "application_requests": {
        # scaling 1000 -> mcore, mb
        (250, 500),
        (500, 1000),
        (750, 1500),
        (500, 1000),
        (250, 500),
        (1000, 2000),
        (500, 1000),
        (750, 2000),
        (1000, 4000),
        (2500, 1000),
    },
    "node_capacity": {
        (2000, 7000),
        (4000, 15000),
        (8000, 30000),
        (2000, 4000),
        (4000, 8000),
        (8000, 16000),
        (2000, 15000),
        (4000, 31000),
        (8000, 62000),
    },
    "node_cost": {
        # scaling 1000
        969,
        1977,
        3953,
        851,
        1701,
        3402,
        1284,
        2607,
        5214,
    },
}
